<%=
  component_wrapper do
    grid_layout('op-meeting-agenda-item', tag: :div, id: "item-#{@meeting_agenda_item.id}") do |grid|
      if drag_and_drop_enabled?
        grid.with_area(:'drag-handle', tag: :div, classes: "hide-when-print") do
          render(Primer::OpenProject::DragHandle.new(classes: 'handle'))
        end
      end

      grid.with_area(:content, tag: :span, mr: 2) do
        if @meeting_agenda_item.visible_work_package?
          flex_layout(align_items: :center) do |flex|
            flex.with_column(mr: 2) do
              render(Primer::Beta::Text.new(font_size: :small, color: :subtle)) do
                "##{@meeting_agenda_item.work_package.id} #{@meeting_agenda_item.work_package.type.name}"
              end
            end

            flex.with_column(mr: 2) do
              render(Primer::Beta::Label.new(font_weight: :bold)) do
                @meeting_agenda_item.work_package.status.name
              end
            end
          end
        elsif @meeting_agenda_item.linked_work_package?
          render(Primer::Beta::Text.new(font_size: :small, mr: 2, color: :subtle, test_selector: 'op-meeting-agenda-title')) do
            I18n.t(:label_agenda_item_undisclosed_wp, id: @meeting_agenda_item.work_package_id)
          end
        elsif @meeting_agenda_item.deleted_work_package?
          render(Primer::Beta::Text.new(tag: :s, font_size: :small, mr: 2, color: :danger, test_selector: 'op-meeting-agenda-title')) do
            I18n.t(:label_agenda_item_deleted_wp)
          end
        else
          render(Primer::Beta::Text.new(font_size: :normal, mr: 2, font_weight: :bold, test_selector: 'op-meeting-agenda-title')) do
            @meeting_agenda_item.title
          end
        end
      end

      grid.with_area(:title, tag: :div) do
        if @meeting_agenda_item.visible_work_package?
          render(Primer::Beta::Link.new(href: work_package_path(@meeting_agenda_item.work_package), underline: false,
                                        test_selector: 'op-meeting-agenda-title',
                                        font_size: :normal, font_weight: :bold, target: "_blank")) do
            @meeting_agenda_item.work_package.subject
          end
        end
      end

      if @meeting_agenda_item.duration_in_minutes.present? && @meeting_agenda_item.duration_in_minutes > 0
        grid.with_area(:duration, Primer::Beta::Text, color: duration_color_scheme, mr: 2) do
          I18n.t('datetime.distance_in_words.x_minutes_abbreviated', count: @meeting_agenda_item.duration_in_minutes)
        end
      end

      if @meeting_agenda_item.presenter
        grid.with_area(:presenter, tag: :div, classes: 'ellipsis') do
          flex_layout(align_items: :flex_end) do |flex|
            flex.with_column(classes: 'ellipsis custom-presenter-flex') do
              render(Users::AvatarComponent.new(user: @meeting_agenda_item.presenter, size: 'mini', title:, classes: 'op-principal_flex'))
            end
          end
        end
      end

      grid.with_area(:actions, tag: :div, justify_self: :end, classes: "hide-when-print") do
        if edit_enabled?
          render(Primer::Alpha::ActionMenu.new) do |menu|
            menu.with_show_button(icon: "kebab-horizontal",
                                  'aria-label': I18n.t(:label_agenda_item_actions),
                                  scheme: :invisible,
                                  ml: 2,
                                  test_selector: 'op-meeting-agenda-actions')
            edit_action_item(menu) if @meeting_agenda_item.editable?
            add_note_action_item(menu) if @meeting_agenda_item.editable? && @meeting_agenda_item.notes.blank?
            unless first? && last?
              menu.with_divider
              move_actions(menu)
            end
            menu.with_divider
            copy_action_item(menu)
            menu.with_divider
            delete_action_item(menu)
          end
        end
      end

      grid.with_area(:notes, tag: :div) do
        if @meeting_agenda_item.notes.present?
          render(Primer::Box.new(classes: "op-uc-container", mt: 1)) do
            format_text(@meeting_agenda_item, :notes)
          end
        end
      end
    end
  end
%>
